name: Code Review with ChatGPT

on:
  pull_request:
    types: [labeled]

jobs:
  if: github.event.label.name == 'start code review'
  code-review:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install openai

    - name: Run code review
      id: code-review
      run: |
        CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})

        for FILE in $CHANGED_FILES; do
          COMMENT=$(python generate_comment.py ${{ secrets.OPENAI_API_KEY }} $FILE)
          echo "::set-output name=comment::$COMMENT"
        done

    - name: Comment on PR
      uses: actions/github-script@v5
      with:
        script: |
          const comment = `Code review comments:\n\n${{ steps.code-review.outputs.comment }}`;

          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const existingComment = comments.find(c => c.user.login === 'github-actions[bot]' && c.body.includes('Code review comments:'));

          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment,
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment,
            });
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
